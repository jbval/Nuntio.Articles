<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plSelectNewsModule.Text">
    <value>Show Banners for...</value>
  </data>
  <data name="NoModuleFound.Text">
    <value>No article module found that you could show banners for. Please add a central article store module to your portal. For further information, refer to the Getting Started section of the help file.</value>
  </data>
  <data name="plSelectNewsModule.Help">
    <value>Select the module that you would like to display banners for</value>
  </data>
  <data name="plType.Help" xml:space="preserve">
    <value>Select the type of banner that you want to display</value>
  </data>
  <data name="plType.Text" xml:space="preserve">
    <value>Banner Type</value>
  </data>
  <data name="cmdUpdate.Text" xml:space="preserve">
    <value>Update Settings</value>
  </data>
  <data name="cmdCancel.Text" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="plHideOnAllNews.Help" xml:space="preserve">
    <value>This setting hides the module if no specific category or news item is selected</value>
  </data>
  <data name="plHideOnAllNews.Text" xml:space="preserve">
    <value>Hide on main listing</value>
  </data>
  <data name="Random.Text" xml:space="preserve">
    <value>Random effects</value>
  </data>
  <data name="None.Text" xml:space="preserve">
    <value>No effect</value>
  </data>
  <data name="plSource.Help" xml:space="preserve">
    <value>Select wether to show banners from the portal or the whole system</value>
  </data>
  <data name="plSource.Text" xml:space="preserve">
    <value>Banner Source</value>
  </data>
  <data name="Portal.Text" xml:space="preserve">
    <value>Current Portal</value>
  </data>
  <data name="Host.Text" xml:space="preserve">
    <value>System</value>
  </data>
  <data name="plCount.Help" xml:space="preserve">
    <value>Enter a numeric value that determines who many banners should be display max.</value>
  </data>
  <data name="plCount.Text" xml:space="preserve">
    <value>Banner Count</value>
  </data>
  <data name="plTransition.Help" xml:space="preserve">
    <value>Select a transition effect between banners</value>
  </data>
  <data name="plTransition.Text" xml:space="preserve">
    <value>Transition Effect</value>
  </data>
  <data name="plFramesToShow.Help" xml:space="preserve">
    <value>Set the amount of news items to show per scroll (default is 1)</value>
  </data>
  <data name="plFramesToShow.Text" xml:space="preserve">
    <value>Frames to Show</value>
  </data>
  <data name="plScrollDirection.Help" xml:space="preserve">
    <value>Set the direction the scroller is operating in</value>
  </data>
  <data name="plScrollDirection.Text" xml:space="preserve">
    <value>Scroll Direction</value>
  </data>
  <data name="plScrollHeight.Help" xml:space="preserve">
    <value>Set the height of the scroller in % or in px (Pixel)</value>
  </data>
  <data name="plScrollHeight.Text" xml:space="preserve">
    <value>Scroll Height</value>
  </data>
  <data name="plScrollSpeed.Help" xml:space="preserve">
    <value>Set the speed of the scroller in ms (default is 20)</value>
  </data>
  <data name="plScrollSpeed.Text" xml:space="preserve">
    <value>Scroll Speed</value>
  </data>
  <data name="plScrollTimeout.Help" xml:space="preserve">
    <value>Set the time in milliseconds that a single item stays on the  page (default is 5000)</value>
  </data>
  <data name="plScrollTimeout.Text" xml:space="preserve">
    <value>Scroll Timeout</value>
  </data>
  <data name="plScrollWidth.Help" xml:space="preserve">
    <value>Set the width of the scroller in % or in px (Pixel)</value>
  </data>
  <data name="plScrollWidth.Text" xml:space="preserve">
    <value>Scroll Width</value>
  </data>
  <data name="ScrollDown.Text" xml:space="preserve">
    <value>Down</value>
  </data>
  <data name="ScrollLeft.Text" xml:space="preserve">
    <value>Left</value>
  </data>
  <data name="ScrollRight.Text" xml:space="preserve">
    <value>Right</value>
  </data>
  <data name="ScrollUp.Text" xml:space="preserve">
    <value>Up</value>
  </data>
  <data name="AllTypes.Text" xml:space="preserve">
    <value>All Types</value>
  </data>
  <data name="plModuletitle.Help" xml:space="preserve">
    <value>Enter a module title for each of your portal locales</value>
  </data>
  <data name="plModuletitle.Text" xml:space="preserve">
    <value>Localized Moduletitle</value>
  </data>
  <data name="plTransitionType.Help" xml:space="preserve">
    <value>Select how to switch between banners</value>
  </data>
  <data name="plTransitionType.Text" xml:space="preserve">
    <value>Transition Type</value>
  </data>
  <data name="Scroll.Text" xml:space="preserve">
    <value>Scroll</value>
  </data>
  <data name="Slideshow.Text" xml:space="preserve">
    <value>Slideshow</value>
  </data>
</root>